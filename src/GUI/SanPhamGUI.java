/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BUS.SanPhamBUS;
import BUS.TheLoaiBUS;
import Components.ButtonRadius;
import DTO.SanPhamDTO;
import DTO.TheLoaiDTO;
import Util.sharedFunction;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.MatteBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ASUS
 */
public final class SanPhamGUI extends javax.swing.JPanel {

    /**
     * Creates new form PhanQuyenGUInew
     */
    private static JTable tableSanPham;
    private static JTable tableTheLoai;
    private static DefaultTableModel modelTheLoai;
    private static DefaultTableModel modelSanPham;
    private Color currentBackgroundColor;
    private final Color targetColor = new Color(229, 231, 230);
    SanPhamBUS sanPhamBUS = new SanPhamBUS();
    TheLoaiBUS theloaBUS = new TheLoaiBUS();

    public SanPhamGUI() {
        initComponents();
        createTable();
        sharedFunction.addPlaceholder(txtTimKiem, "Tìm kiếm theo mã hoặc tên sản phẩm ");
        // gán màu của background thể loại hiện tại để xét việc thực hiện chức năng CRUD của bảng thể loại hay Sản phẩm
        currentBackgroundColor = lblTheLoai.getBackground();
    }

    private void createTable() {
        // Tạo bảng sản phẩm
        tableSanPham = createTableSanPham();
        // Tạo bản thể loại
        tableTheLoai = createTableTheLoai();
        // Load data bảng sản phẩm 
        ArrayList<SanPhamDTO> listSanPham = sanPhamBUS.getAllSanPham();
        loadTableSanPham(listSanPham, modelSanPham);
        // Load data bảng thể loại
        ArrayList<TheLoaiDTO> listTheLoai = theloaBUS.getAll();
        loadTableTheLoai(listTheLoai, modelTheLoai);
        // Set kích thước bảng bằng với panel chứa nó
        tableSanPham.setPreferredScrollableViewportSize(PanelTable.getPreferredSize());
        JScrollPane scrollPaneSanPham = new JScrollPane(tableSanPham);
        MatteBorder matteBorder = new MatteBorder(0, 1, 1, 1, new Color(164, 191, 226));
        scrollPaneSanPham.setBorder(matteBorder);
        PanelTable.setLayout(new BorderLayout());
        PanelTable.add(scrollPaneSanPham);
    }

    public ButtonRadius getBtnSua() {
        return btnSua;
    }

    public ButtonRadius getBtnThem() {
        return btnThem;
    }

    public ButtonRadius getBtnXoa() {
        return btnXoa;
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnTimKiem = new Components.ButtonRadius();
        jPanelTimKiem = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        lblTimKiem = new javax.swing.JLabel();
        jPanelBody = new javax.swing.JPanel();
        lblTheLoai = new javax.swing.JLabel();
        lblSanPham = new javax.swing.JLabel();
        PanelTable = new javax.swing.JPanel();
        btnThem = new Components.ButtonRadius();
        btnSua = new Components.ButtonRadius();
        btnXoa = new Components.ButtonRadius();
        btnLamMoi = new Components.ButtonRadius();
        jPanel1 = new javax.swing.JPanel();
        timKiemTheo = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));

        btnTimKiem.setBackground(new java.awt.Color(153, 204, 255));
        btnTimKiem.setBorder(null);
        btnTimKiem.setForeground(new java.awt.Color(102, 102, 102));
        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/icon_24px/search.png"))); // NOI18N
        btnTimKiem.setText("Tìm");
        btnTimKiem.setColor(new java.awt.Color(153, 204, 255));
        btnTimKiem.setFocusPainted(false);
        btnTimKiem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnTimKiem.setPreferredSize(new java.awt.Dimension(50, 25));
        btnTimKiem.setRadius(40);
        btnTimKiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnTimKiemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnTimKiemMouseExited(evt);
            }
        });
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        jPanelTimKiem.setBackground(new java.awt.Color(243, 243, 244));
        jPanelTimKiem.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(162, 198, 231), 2));

        txtTimKiem.setBackground(new java.awt.Color(243, 243, 244));
        txtTimKiem.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtTimKiem.setForeground(new java.awt.Color(134, 172, 218));
        txtTimKiem.setBorder(null);
        txtTimKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTimKiemFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTimKiemFocusLost(evt);
            }
        });
        txtTimKiem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtTimKiemMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtTimKiemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtTimKiemMouseExited(evt);
            }
        });
        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });

        lblTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/icon_24px/search.png"))); // NOI18N

        javax.swing.GroupLayout jPanelTimKiemLayout = new javax.swing.GroupLayout(jPanelTimKiem);
        jPanelTimKiem.setLayout(jPanelTimKiemLayout);
        jPanelTimKiemLayout.setHorizontalGroup(
            jPanelTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTimKiemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTimKiem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelTimKiemLayout.setVerticalGroup(
            jPanelTimKiemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTimKiem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(txtTimKiem)
        );

        jPanelBody.setBackground(new java.awt.Color(255, 51, 51));
        jPanelBody.setOpaque(false);

        lblTheLoai.setBackground(new java.awt.Color(255, 255, 255));
        lblTheLoai.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblTheLoai.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTheLoai.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/icon_40px/product_1.png"))); // NOI18N
        lblTheLoai.setText("Thể loại");
        lblTheLoai.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 1, 0, 2, new java.awt.Color(118, 161, 213)));
        lblTheLoai.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblTheLoai.setOpaque(true);
        lblTheLoai.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblTheLoaiMouseClicked(evt);
            }
        });

        lblSanPham.setBackground(new java.awt.Color(229, 231, 230));
        lblSanPham.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblSanPham.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSanPham.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/icon_40px/product_1.png"))); // NOI18N
        lblSanPham.setText("Sản phẩm");
        lblSanPham.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 0, 1, new java.awt.Color(118, 161, 213)));
        lblSanPham.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblSanPham.setOpaque(true);
        lblSanPham.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSanPhamMouseClicked(evt);
            }
        });

        PanelTable.setBackground(new java.awt.Color(255, 255, 255));
        PanelTable.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout PanelTableLayout = new javax.swing.GroupLayout(PanelTable);
        PanelTable.setLayout(PanelTableLayout);
        PanelTableLayout.setHorizontalGroup(
            PanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1003, Short.MAX_VALUE)
        );
        PanelTableLayout.setVerticalGroup(
            PanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
        );

        btnThem.setBackground(new java.awt.Color(153, 204, 255));
        btnThem.setBorder(null);
        btnThem.setForeground(new java.awt.Color(102, 102, 102));
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/icon_24px/add.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setColor(new java.awt.Color(153, 204, 255));
        btnThem.setFocusPainted(false);
        btnThem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnThem.setPreferredSize(new java.awt.Dimension(50, 25));
        btnThem.setRadius(40);
        btnThem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnThemMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnThemMouseExited(evt);
            }
        });
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(153, 204, 255));
        btnSua.setBorder(null);
        btnSua.setForeground(new java.awt.Color(102, 102, 102));
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/icon_24px/fix.png"))); // NOI18N
        btnSua.setText("Sửa");
        btnSua.setColor(new java.awt.Color(153, 204, 255));
        btnSua.setFocusPainted(false);
        btnSua.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSua.setPreferredSize(new java.awt.Dimension(50, 25));
        btnSua.setRadius(40);
        btnSua.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSuaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSuaMouseExited(evt);
            }
        });
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(153, 204, 255));
        btnXoa.setBorder(null);
        btnXoa.setForeground(new java.awt.Color(102, 102, 102));
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/icon_24px/cancel.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.setColor(new java.awt.Color(153, 204, 255));
        btnXoa.setFocusPainted(false);
        btnXoa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnXoa.setPreferredSize(new java.awt.Dimension(50, 25));
        btnXoa.setRadius(40);
        btnXoa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnXoaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnXoaMouseExited(evt);
            }
        });
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnLamMoi.setBackground(new java.awt.Color(153, 204, 255));
        btnLamMoi.setBorder(null);
        btnLamMoi.setForeground(new java.awt.Color(102, 102, 102));
        btnLamMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/icon_24px/back.png"))); // NOI18N
        btnLamMoi.setText("Làm mới");
        btnLamMoi.setColor(new java.awt.Color(153, 204, 255));
        btnLamMoi.setFocusPainted(false);
        btnLamMoi.setFont(new java.awt.Font("Josefin Sans SemiBold", 0, 17)); // NOI18N
        btnLamMoi.setIconTextGap(0);
        btnLamMoi.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnLamMoi.setMaximumSize(new java.awt.Dimension(100, 40));
        btnLamMoi.setPreferredSize(new java.awt.Dimension(100, 40));
        btnLamMoi.setRadius(40);
        btnLamMoi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLamMoiMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLamMoiMouseExited(evt);
            }
        });
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        timKiemTheo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        timKiemTheo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tìm kiếm theo", "Mã sản phẩm", "Tên sản phẩm", "nhà sản xuât", "Thể loại", "Tìm kiếm nâng cao" }));
        timKiemTheo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        timKiemTheo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timKiemTheoMouseClicked(evt);
            }
        });
        timKiemTheo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timKiemTheoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(timKiemTheo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 146, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(timKiemTheo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelBodyLayout = new javax.swing.GroupLayout(jPanelBody);
        jPanelBody.setLayout(jPanelBodyLayout);
        jPanelBodyLayout.setHorizontalGroup(
            jPanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBodyLayout.createSequentialGroup()
                .addGroup(jPanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBodyLayout.createSequentialGroup()
                        .addComponent(lblSanPham, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(lblTheLoai, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBodyLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(PanelTable, javax.swing.GroupLayout.PREFERRED_SIZE, 1003, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelBodyLayout.setVerticalGroup(
            jPanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBodyLayout.createSequentialGroup()
                .addGroup(jPanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblSanPham, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTheLoai, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanelBodyLayout.createSequentialGroup()
                            .addGroup(jPanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnLamMoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(7, 7, 7)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(PanelTable, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(jPanelTimKiem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanelBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lblSanPhamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSanPhamMouseClicked
        // TODO add your handling code here:
        timKiemTheo.setVisible(true);
        PanelTable.removeAll();
        tableSanPham.setPreferredScrollableViewportSize(PanelTable.getPreferredSize());
        tableSanPham.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        JScrollPane scrollPaneSanPham = new JScrollPane(tableSanPham);
        MatteBorder matteBorder = new MatteBorder(0, 1, 1, 1, new Color(164, 191, 226));
        scrollPaneSanPham.setBorder(matteBorder);
        PanelTable.setLayout(new BorderLayout());
        PanelTable.add(scrollPaneSanPham);
        PanelTable.revalidate();
        PanelTable.repaint();
        lblSanPham.setBackground(new Color(229, 231, 230));
        lblTheLoai.setBackground(new Color(255, 255, 255));
        sharedFunction.addPlaceholder(txtTimKiem, "Tìm kiếm theo mã hoặc tên sản phẩm ");
    }//GEN-LAST:event_lblSanPhamMouseClicked

    private void lblTheLoaiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTheLoaiMouseClicked
        // TODO add your handling code here:
        timKiemTheo.setVisible(false);
        PanelTable.removeAll();
        tableTheLoai.setPreferredScrollableViewportSize(PanelTable.getPreferredSize());
        tableTheLoai.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        JScrollPane scrollPaneTheLoai = new JScrollPane(tableTheLoai);
        MatteBorder matteBorder = new MatteBorder(0, 1, 1, 1, new Color(164, 191, 226));
        scrollPaneTheLoai.setBorder(matteBorder);
        PanelTable.setLayout(new BorderLayout());
        PanelTable.add(scrollPaneTheLoai);
        PanelTable.revalidate();
        PanelTable.repaint();

        //Khi click chuột vào sẽ đổi màu giúp nhận biết đang ở bảng nào
        lblTheLoai.setBackground(new Color(229, 231, 230));
        lblSanPham.setBackground(new Color(255, 255, 255));
        sharedFunction.addPlaceholder(txtTimKiem, "Tìm kiếm theo mã hoặc tên thể loại");
    }//GEN-LAST:event_lblTheLoaiMouseClicked

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:

        currentBackgroundColor = lblTheLoai.getBackground();
        String searchKeyword = txtTimKiem.getText().trim();
        // xử lý việc thêm sửa xóa cho bảng thể loại hay bảng sản phẩm
        if (currentBackgroundColor.equals(targetColor)) {
            findTheLoaiByMaTL_or_TenTL();
        } else {
            int selectedIndex = timKiemTheo.getSelectedIndex();
            if (selectedIndex != 5) {
                findSanPham(searchKeyword, selectedIndex, modelSanPham);
            } else {

            }
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed
    public void findSanPham(String searchKeyword, int selectedIndex, DefaultTableModel model) {

        if (searchKeyword.isEmpty()) {
            sharedFunction.addPlaceholder(txtTimKiem, getPlaceholderByIndex(selectedIndex));
        }
        switch (selectedIndex) {
            case 0 -> {
                findSanPhamByTenSP_or_MaSP(searchKeyword, model);
            }
            case 1 -> {
                findSanPhamByMaSP(searchKeyword, model);
            }
            case 2 -> {
                findSanPhamByTenSP(searchKeyword, model);
            }
            case 3 -> {
                findSanPhamByNhaSanXuat(searchKeyword, model);
            }
            case 4 -> {
                findSanPhamByTheLoai(searchKeyword, model);
            }

            default -> {
            }
        }
    }
    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        currentBackgroundColor = lblTheLoai.getBackground();
        // xử lý việc thêm sửa xóa cho bảng thể loại hay bảng sản phẩm
        if (currentBackgroundColor.equals(targetColor)) {
            int maTL = theloaBUS.getMaTheLoaiMax() + 1;  // cộng 1 để ra được maTL kế tiếp 
            String maTLtext = FormatMaTL(maTL); // chuyển mã TL về định dạng TLxx
            int rowCount = modelTheLoai.getRowCount(); // lấy số dòng của bảng thể loại
            int STT = rowCount + 1; // cộng 1 để ra số dòng tiếp theo cần thêm
            ChiTietTheLoai cttl = new ChiTietTheLoai(STT, maTLtext);
            cttl.setVisible(true);
        } else {
            int maSP = sanPhamBUS.getMaSPMax() + 1; // cộng 1 để lấy maSP tự động kế tiếp
            String maSPtext = FormatMaSP(maSP); // chuyển mã SP về định dạng SPxx
            int rowCount = modelSanPham.getRowCount();
            int STT = rowCount + 1;
            ChiTietSanPham ctsp = new ChiTietSanPham(STT, maSPtext);
            ctsp.setVisible(true);
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        currentBackgroundColor = lblTheLoai.getBackground();
        // xử lý việc thêm sửa xóa cho bảng thể loại hay bảng sản phẩm         
        if (currentBackgroundColor.equals(targetColor)) {
            int selectedRow = tableTheLoai.getSelectedRow();
            if (selectedRow >= 0) {
                // Lấy dữ liệu từ bảng dựa trên hàng được chọn (STT, Mã thể loại, Tên thể loại)
                String maTheLoai = (String) tableTheLoai.getValueAt(selectedRow, 1);
                String tenTheLoai = (String) tableTheLoai.getValueAt(selectedRow, 2);

                // Tạo frame để chỉnh sửa thông tin
                ChiTietTheLoai ct = new ChiTietTheLoai(selectedRow, maTheLoai, tenTheLoai);
                ct.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn thể loại cần sửa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            int selectedRow = tableSanPham.getSelectedRow();
            if (selectedRow >= 0) {
                // Lấy dữ liệu từ bảng dựa trên hàng được chọn 
                String maSP = (String) tableSanPham.getValueAt(selectedRow, 1);
                String tenSP = (String) tableSanPham.getValueAt(selectedRow, 2);
                String nhaSanXuat = (String) tableSanPham.getValueAt(selectedRow, 3);
                String theLoai = (String) tableSanPham.getValueAt(selectedRow, 4);
                int soLuong = (int) tableSanPham.getValueAt(selectedRow, 5);
                String donGia = (String) tableSanPham.getValueAt(selectedRow, 6);
                double dongia = sharedFunction.parseMoneyString(donGia);
                // Tạo frame để chỉnh sửa thông tin
                ChiTietSanPham ctsp = new ChiTietSanPham(selectedRow, maSP, tenSP, nhaSanXuat, theLoai, soLuong, dongia);
                ctsp.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm cần sửa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnTimKiemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTimKiemMouseEntered
        // TODO add your handling code here:
        btnTimKiem.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

    }//GEN-LAST:event_btnTimKiemMouseEntered

    private void btnTimKiemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTimKiemMouseExited
        // TODO add your handling code here:
        btnTimKiem.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnTimKiemMouseExited

    private void btnThemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnThemMouseEntered
        // TODO add your handling code here:
        btnThem.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btnThemMouseEntered

    private void btnThemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnThemMouseExited
        // TODO add your handling code here:
        btnThem.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnThemMouseExited

    private void btnSuaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSuaMouseEntered
        // TODO add your handling code here: 
        btnSua.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

    }//GEN-LAST:event_btnSuaMouseEntered

    private void btnSuaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSuaMouseExited
        // TODO add your handling code here:
        btnSua.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnSuaMouseExited

    private void txtTimKiemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimKiemFocusGained
//        // TODO add your handling code here:
//        if (txtTimKiem.getText().equals("Tìm kiếm")) {
//            txtTimKiem.setText("");
//
////            txtTimKiem.requestFocus();
//            removePlaceholderStyle(txtTimKiem);
//        }
    }//GEN-LAST:event_txtTimKiemFocusGained

    private void txtTimKiemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimKiemFocusLost
//        // TODO add your handling code here:
//        if (txtTimKiem.getText().equals("")) {
//            addPlaceholderStyle(txtTimKiem, "Tìm kiếm");
//            System.out.println("hi1" + txtTimKiem.getText());
//        }
    }//GEN-LAST:event_txtTimKiemFocusLost

    private void txtTimKiemMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimKiemMouseEntered
        // TODO add your handling code here:

    }//GEN-LAST:event_txtTimKiemMouseEntered

    private void txtTimKiemMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimKiemMouseExited
        // TODO add your handling code here:

    }//GEN-LAST:event_txtTimKiemMouseExited

    private void btnXoaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnXoaMouseEntered
        // TODO add your handling code here:
        btnXoa.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btnXoaMouseEntered

    private void btnXoaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnXoaMouseExited
        // TODO add your handling code here:
        btnThem.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnXoaMouseExited

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        currentBackgroundColor = lblTheLoai.getBackground();
        if (currentBackgroundColor.equals(targetColor)) {
            XoaTheLoai();
        } else {
            XoaSanPham();
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        currentBackgroundColor = lblTheLoai.getBackground();
        if (currentBackgroundColor.equals(targetColor)) {
            ArrayList<TheLoaiDTO> listTheLoai = theloaBUS.getAll();
            loadTableTheLoai(listTheLoai, modelTheLoai);
//            nhapNhay();
        } else {
            ArrayList<SanPhamDTO> listSanPham = sanPhamBUS.getAllSanPham();
            loadTableSanPham(listSanPham, modelSanPham);
        }
    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void timKiemTheoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timKiemTheoActionPerformed
        // TODO add your handling code here:
        int selectedIndex = timKiemTheo.getSelectedIndex();

        if (selectedIndex == 5) {
            LocAnd l = new LocAnd(1);
            sharedFunction.openNewFrame(l);
        } else {

            sharedFunction.addPlaceholder(txtTimKiem, getPlaceholderByIndex(selectedIndex));
        }


    }//GEN-LAST:event_timKiemTheoActionPerformed
    public String getPlaceholderByIndex(int selectedIndex) {
        return switch (selectedIndex) {
            case 0 ->
                "Tìm kiếm theo mã hoặc tên sản phẩm ";
            case 1 ->
                "Tìm kiếm theo mã sản phẩm ";
            case 2 ->
                "Tìm kiếm theo tên sản phẩm ";
            case 3 ->
                "Tìm kiếm theo tên nhà sản xuất ";
            case 4 ->
                "Tìm kiếm theo thể loại";
            default ->
                "";
        };
    }
    private void btnLamMoiMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLamMoiMouseEntered
        // TODO add your handling code here:
        btnLamMoi.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_btnLamMoiMouseEntered

    private void btnLamMoiMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLamMoiMouseExited
        // TODO add your handling code here:
        btnLamMoi.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnLamMoiMouseExited

    private void timKiemTheoPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_timKiemTheoPopupMenuWillBecomeInvisible
        // TODO add your handling code here:

// Lấy mô hình của ComboBox
        DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) timKiemTheo.getModel();

// Kiểm tra xem mục đầu tiên có phải là "Chọn thể loại" không
        if (model.getElementAt(0).equals("Tìm kiếm theo")) {
            // Ẩn hoặc thay đổi mục "Chọn thể loại"
            model.removeElement("Tìm kiếm theo"); // Để xóa mục
            // Hoặc model.setElementAt("Một lựa chọn khác", 0); để thay đổi nó
        }
    }//GEN-LAST:event_timKiemTheoPopupMenuWillBecomeInvisible

    private void timKiemTheoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timKiemTheoFocusGained
        // TODO add your handling code here:
        // Xóa "Chọn thể loại" khi ComboBox được focus
//                timKiemTheo.removeItem("Tìm kiếm theo");
    }//GEN-LAST:event_timKiemTheoFocusGained

    private void txtTimKiemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTimKiemMouseClicked
        // TODO add your handling code here:
        txtTimKiem.setText("");
    }//GEN-LAST:event_txtTimKiemMouseClicked

    private void timKiemTheoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timKiemTheoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_timKiemTheoMouseClicked

    public JTable createTableSanPham() {
        // Tiêu đề của các cột
        String[] columnNames = {"STT", "ID Sản phẩm", "Tên sản phẩm", "Tên nhà sản xuất", "Thể loại", "Số lượng", "Đơn giá"};
        modelSanPham = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0 || columnIndex == 5) { // Cột STT và Số lượng
                    return Integer.class; // Kiểu dữ liệu Integer
                } else if (columnIndex == 6) { // Cột Đơn giá
                    return Float.class; // Kiểu dữ liệu Float
                }
                return String.class; // Các cột khác có kiểu dữ liệu String
            }
        };
        modelSanPham.setColumnIdentifiers(columnNames);

        // Tạo JTable với DefaultTableModel
        JTable table = new JTable(modelSanPham);
        TableColumnModel columnModel = table.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(60); // Độ rộng cột 0
        columnModel.getColumn(1).setPreferredWidth(120); // Độ rộng cột 1
        columnModel.getColumn(2).setPreferredWidth(250); // Độ rộng cột 2
        columnModel.getColumn(3).setPreferredWidth(209); // Độ rộng cột 3
        columnModel.getColumn(4).setPreferredWidth(120); // Độ rộng cột 4
        columnModel.getColumn(5).setPreferredWidth(120); // Độ rộng cột 5
        columnModel.getColumn(6).setPreferredWidth(120); // Độ rộng cột 6

        sharedFunction.EditHeaderTable(table);
        sharedFunction.EditTableContent(table);
        return table;
    }

    public static void loadTableSanPham(ArrayList<SanPhamDTO> listSanPham, DefaultTableModel modelSanPham) {
        modelSanPham.setRowCount(0);
        int STT = 1;
        for (SanPhamDTO sanPham : listSanPham) {
            int maSP = sanPham.getMaSP();
            String maSPtext = sharedFunction.FormatID("SP", maSP);
            String tenTL = sanPham.getTenTL();
            String tenSanPham = sanPham.getTenSP();
            String tenNhaSanXuat = sanPham.getNhaSanXuat();
            int soLuong = sanPham.getSoLuong();
            double donGia = sanPham.getDonGia();
            String formatDonGia = sharedFunction.formatVND(donGia);
            Object[] row = {STT++, maSPtext, tenSanPham, tenNhaSanXuat, tenTL, soLuong, formatDonGia};
            modelSanPham.addRow(row);
        }
    }

    public JTable createTableTheLoai() {
        // Tiêu đề của các cột
        String[] columnNames = {"STT", "ID Thể loại", "Tên thể loại"};
        // Tạo DefaultTableModel với dữ liệu và tiêu đề cột
        modelTheLoai = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) { // Cột STT 
                    return Integer.class; // Kiểu dữ liệu Integer
                }
                return String.class; // Các cột khác có kiểu dữ liệu String
            }
        };
        modelTheLoai.setColumnIdentifiers(columnNames);

        // Tạo JTable với DefaultTableModel
        JTable table = new JTable(modelTheLoai);
        TableColumnModel columnModel = table.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(70); // Độ rộng cột 0
        columnModel.getColumn(1).setPreferredWidth(200); // Độ rộng cột 1
        columnModel.getColumn(2).setPreferredWidth(729); // Độ rộng cột 2
        sharedFunction.EditHeaderTable(table);
        sharedFunction.EditTableContent(table);
        return table;
    }

    public void loadTableTheLoai(ArrayList<TheLoaiDTO> listTheLoai, DefaultTableModel modelTheLoai) {
        //  Load data lên bảng 
        modelTheLoai.setRowCount(0);
        int STT = 1;
        for (TheLoaiDTO theloai : listTheLoai) {
            int maTL = theloai.getMaTL();
            String maTLtext = sharedFunction.FormatID("TL", maTL);
            String tenTheLoai = theloai.getTenTL();
            Object[] row = {STT++, maTLtext, tenTheLoai};
            modelTheLoai.addRow(row);
        }
    }

    public static String FormatMaTL(int MaTL) {
        return String.format("TL%02d", MaTL);
    }

    public static String FormatMaSP(int MaSP) {
        return String.format("SP%02d", MaSP);
    }

    private void addPlaceholderStyle(JTextField textField, String name) {
        Font customFont = new Font("Tahoma", Font.BOLD, 16);
        textField.setFont(customFont);
        textField.setForeground(new Color(157, 185, 223));
        textField.setText(name);

    }

    public void removePlaceholderStyle(JTextField textFiled) {
        textFiled.setForeground(Color.black);
    }

    public static void addTheLoaiTable(TheLoaiDTO tl, int STT, String maTL) {
        modelTheLoai.addRow(new Object[]{STT, maTL, tl.getTenTL()});
    }

    public static void addSanPhamTable(SanPhamDTO sp, int STT, String tenTL, String maSP) {
        modelSanPham.addRow(new Object[]{STT, maSP, sp.getTenSP(), sp.getNhaSanXuat(), tenTL, sp.getSoLuong(), sp.getDonGia()});
    }

    public static void updateSanPhamTable(SanPhamDTO sp, int STT, String tenTL) {
        modelSanPham.setValueAt(sp.getTenSP(), STT, 2);
        modelSanPham.setValueAt(sp.getNhaSanXuat(), STT, 3);
        modelSanPham.setValueAt(tenTL, STT, 4);
        modelSanPham.setValueAt(sp.getSoLuong(), STT, 5);
        modelSanPham.setValueAt(sp.getDonGia(), STT, 6);

    }

    public static void updateTheLoaiTable(TheLoaiDTO tl, int STT) {
        modelTheLoai.setValueAt(tl.getTenTL(), STT, 2);
    }

    private void XoaTheLoai() {
        int selectedRowIndex = tableTheLoai.getSelectedRow();
        if (selectedRowIndex != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                // Lấy mã thể loại từ dòng được chọn trong bảng
                String maTL = (String) modelTheLoai.getValueAt(selectedRowIndex, 1);
                int maTLNumber = Integer.parseInt(maTL.substring(2));
                // Gọi lớp BUS để xóa thể loại dựa trên mã thể loại
                if (theloaBUS.deleteTheLoaiByMaTL(maTLNumber)) {
                    // Xóa dòng khỏi bảng
                    modelTheLoai.removeRow(selectedRowIndex);
                    for (int i = 0; i < modelTheLoai.getRowCount(); i++) {
                        modelTheLoai.setValueAt(i + 1, i, 0);
                    }
                    JOptionPane.showMessageDialog(this, "Đã xóa thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Thể loại có tồn tại sản phẩm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn thể loại cần xóa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void XoaSanPham() {
        int selectedRowIndex = tableSanPham.getSelectedRow();
        if (selectedRowIndex != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa ?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                // Lấy mã thể loại từ dòng được chọn trong bảng
                String maSP = (String) modelSanPham.getValueAt(selectedRowIndex, 1);
                int maSpNumber = Integer.parseInt(maSP.substring(2));
                // Gọi lớp BUS để xóa thể loại dựa trên mã thể loại
                if (sanPhamBUS.deleteSanPhamByMaSP(maSpNumber)) {
                    // Xóa dòng khỏi bảng
                    modelSanPham.removeRow(selectedRowIndex);
                    // Cập nhật lại giá trị STT
                    for (int i = 0; i < modelSanPham.getRowCount(); i++) {
                        modelSanPham.setValueAt(i + 1, i, 0);
                    }
                    JOptionPane.showMessageDialog(this, "Đã xóa thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Lỗi khi xóa sản phẩm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm cần xóa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void findTheLoaiByMaTL_or_TenTL() {
        // Lấy từ khóa tìm kiếm từ JTextField và gọi phương thức tìm kiếtừ JTextField vàm thể loại từ lớp BUS
        String maTL = txtTimKiem.getText();
        if (maTL.isEmpty() || maTL.trim().equals("Tìm kiếm theo mã hoặc tên thể loại")) {
            // Nếu maTL rỗng, thông báo cho người dùng nhập mã hoặc tên
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã hoặc tên thể loại cần tìm kiếm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            // Nếu maTL không rỗng, tiến hành  gọi phương thức từ lớp BUS để tìm kiếm thể loại
            ArrayList<TheLoaiDTO> listTheLoai = theloaBUS.findTheLoaiByMaTL_or_TenTL(maTL);
            if (!listTheLoai.isEmpty()) {
                loadTableTheLoai(listTheLoai, modelTheLoai);
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }

    public void findSanPhamByTenSP_or_MaSP(String maSP, DefaultTableModel model) {
        if (maSP.isEmpty()) {
            // Nếu  rỗng, thông báo cho người dùng nhập 
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã hoặc tên sản phẩm cần tìm kiếm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            // Nếu không rỗng, tiến hành  gọi phương thức từ lớp BUS để tìm kiếm 
            ArrayList<SanPhamDTO> listSanPham = sanPhamBUS.findSPByTenSP(maSP);
            if (!listSanPham.isEmpty()) {
                loadTableSanPham(listSanPham, model);

            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }

    public void findSanPhamByNhaSanXuat(String NhaSanXuat, DefaultTableModel model) {
        if (NhaSanXuat.isEmpty() || NhaSanXuat.trim().equals("Tìm kiếm theo nhà sản xuất")) {
            // Nếu  rỗng, thông báo cho người dùng nhập 
            JOptionPane.showMessageDialog(this, "Vui lòng nhập tên nhà sản xuất", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            // Nếu không rỗng, tiến hành  gọi phương thức từ lớp BUS để tìm kiếm 
            ArrayList<SanPhamDTO> listSanPham = sanPhamBUS.findSPByNhaSanXuat(NhaSanXuat);
            if (!listSanPham.isEmpty()) {
                loadTableSanPham(listSanPham, model);
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }

    public void findSanPhamByTenSP(String TenSP, DefaultTableModel model) {
        if (TenSP.isEmpty() || TenSP.trim().equals("Tìm kiếm theo tên sản phẩm")) {
            // Nếu  rỗng, thông báo cho người dùng nhập
            JOptionPane.showMessageDialog(this, "Vui lòng nhập tên sản phẩm ", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            // Nếu không rỗng, tiến hành  gọi phương thức từ lớp BUS để tìm kiếm 
            ArrayList<SanPhamDTO> listSanPham = sanPhamBUS.findSPByTenSP(TenSP);
            if (!listSanPham.isEmpty()) {
                loadTableSanPham(listSanPham, model);
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }

    public void findSanPhamByTheLoai(String TheLoai, DefaultTableModel model) {
        if (TheLoai.isEmpty() || TheLoai.trim().equals("Tìm kiếm theo thể loại")) {
            // Nếut thể loại rỗng, thông báo cho người dùng nhập 
            JOptionPane.showMessageDialog(this, "Vui lòng nhập tên thể loại ", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            // Nếu không rỗng, tiến hành  gọi phương thức từ lớp BUS để tìm kiếm
            ArrayList<SanPhamDTO> listSanPham = sanPhamBUS.findSPByTheLoai(TheLoai);
            if (!listSanPham.isEmpty()) {
                loadTableSanPham(listSanPham, model);
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }

    public void findSanPhamByMaSP(String maSP, DefaultTableModel model) {

        if (maSP.isEmpty() || maSP.trim().equals("Tìm kiếm theo mã sản phẩm")) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã sản phẩm.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int maSPnumber = sharedFunction.convertToInteger(maSP, "SP");
            if (maSPnumber == -1) {
                // Nếu maSP không hợp lệ hoặc không thể chuyển thành số nguyên, thông báo 
                JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // MaSP có thể chuyển thành số nguyên, tiến hành gọi phương thức từ lớp BUS để tìm kiếm
                ArrayList<SanPhamDTO> listSanPham = sanPhamBUS.findSPByMaSP(maSPnumber);
                if (!listSanPham.isEmpty()) {
                    loadTableSanPham(listSanPham, model);
                } else {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }

    }

  public static DefaultTableModel getModelSanPham() {
        return modelSanPham;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelTable;
    private Components.ButtonRadius btnLamMoi;
    private Components.ButtonRadius btnSua;
    private Components.ButtonRadius btnThem;
    private Components.ButtonRadius btnTimKiem;
    private Components.ButtonRadius btnXoa;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelBody;
    private javax.swing.JPanel jPanelTimKiem;
    private javax.swing.JLabel lblSanPham;
    private javax.swing.JLabel lblTheLoai;
    private javax.swing.JLabel lblTimKiem;
    private javax.swing.JComboBox<String> timKiemTheo;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
